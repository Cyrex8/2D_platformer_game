using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Character : BaseChar {
    [SerializeField]
    private float speed=3.0F;
    [SerializeField]
    private float jumpPower=5.0F;
    [SerializeField]
    private int lives = 5;
    private Rigidbody2D rigidbody;
    private SpriteRenderer sprite;
    private bool isGrounded=false;
    private Bullet bullet;


    private void Awake()
    {
        rigidbody = GetComponent<Rigidbody2D>();
        sprite = GetComponentInChildren<SpriteRenderer>();

        bullet = Resources.Load<Bullet>("Bullet");

    }
    private void FixedUpdate()
    {
        CheckGround();

    }
    private void Update()
    {
        
        if (Input.GetButton("Horizontal")) Run();
        if (isGrounded && Input.GetButtonDown("Jump")) Jump();

        if (Input.GetButtonDown("Fire1")) Shooting();
    }
private void Run()
    {
        Vector3 direction = transform.right * Input.GetAxis("Horizontal");
        transform.position = Vector3.MoveTowards(transform.position, transform.position + direction, speed * Time.deltaTime);
        sprite.flipX = direction.x < 0.0F;



    }
    private void Jump()
    {
        rigidbody.AddForce(transform.up*jumpPower,ForceMode2D.Impulse);

    }
    private void CheckGround()
    {
        Collider2D[] colliders = Physics2D.OverlapCircleAll(transform.position, 0.3F);
        isGrounded = colliders.Length > 1;
    }

    private void Shooting()
    {
        Vector3 position = transform.position; position.y -= 0.05F; 
       Bullet newBullet= Instantiate(bullet,position, bullet.transform.rotation) as Bullet;
        newBullet.Parent = gameObject;
        newBullet.Direction = newBullet.transform.right * (sprite.flipX ? -1.0F : 1.0F);

    }

    public override void ReceiveDamage()
    {
        lives--;
        rigidbody.velocity = Vector3.zero;
        rigidbody.AddForce(transform.up * 5.0F, ForceMode2D.Impulse);
        Debug.Log(lives);

    }




}
